#ifndef NODE
#define NODE(NAME, CHILD_NODES)
#endif
#ifndef DERIVED
#define DERIVED(NAME, ANCESTORS, CHILD_NODES)
#endif
#ifndef EXTENDS
#define EXTENDS(BASE)
#endif
#ifndef CHILDREN
#define CHILDREN(...)
#endif
#ifndef ONE
#define ONE(OF, NAME)
#endif
#ifndef MANY
#define MANY(OF, NAME)
#endif
#ifndef MAYBE
#define MAYBE(OF, NAME)
#endif
#ifndef STRING
#define STRING(NAME)
#endif
#ifndef STRINGS
#define STRINGS(NAME)
#endif
#ifndef MAYBE_STR
#define MAYBE_STR(NAME)
#endif

NODE(statement, CHILDREN())
NODE(module, CHILDREN(MANY(statement, stmts)))
DERIVED(expression, EXTENDS(statement), CHILDREN())
NODE(param_list, CHILDREN(STRINGS(names) MAYBE_STR(rest)))
DERIVED(block, EXTENDS(statement), CHILDREN(MANY(statement, stmts)))
DERIVED(function_expr, EXTENDS(expression), CHILDREN(MAYBE_STR(name) ONE(param_list, params) ONE(block, body)))
NODE(class_func, CHILDREN(STRING(name) ONE(param_list, params) ONE(block, body)))
DERIVED(class_expr, EXTENDS(expression), CHILDREN(MAYBE_STR(name) MAYBE(class_func, constructor) MANY(class_func, functions) MANY(class_func, static_functions)))
DERIVED(arrow_function, EXTENDS(expression), CHILDREN(ONE(param_list, params) ONE(statement, body)))
DERIVED(identifier_expr, EXTENDS(expression), CHILDREN(STRING(str)))

DERIVED(number_literal, EXTENDS(expression), CHILDREN(STRING(val)))
DERIVED(int_literal, EXTENDS(number_literal), CHILDREN())
DERIVED(float_literal, EXTENDS(number_literal), CHILDREN())
DERIVED(hex_literal, EXTENDS(number_literal), CHILDREN())
DERIVED(oct_literal, EXTENDS(number_literal), CHILDREN())
DERIVED(bin_literal, EXTENDS(number_literal), CHILDREN())
DERIVED(string_literal, EXTENDS(expression), CHILDREN(STRING(val)))
DERIVED(regex_literal, EXTENDS(expression), CHILDREN(STRING(val)))
DERIVED(template, EXTENDS(expression), CHILDREN())
DERIVED(template_string, EXTENDS(template), CHILDREN(STRING(val)))
DERIVED(template_literal, EXTENDS(template), CHILDREN(STRINGS(strs) MANY(expression, exprs)))
DERIVED(tagged_template, EXTENDS(expression), CHILDREN(ONE(template, literal)))
DERIVED(array_literal, EXTENDS(expression), CHILDREN(MANY(expression, values)))
// I don't like object entries being expressions, but that's the just the
// superset of spread_expr and identifier_expr, which are all legal in
// object literals
DERIVED(object_entry, EXTENDS(expression), CHILDREN(STRING(key) ONE(expression, val)))
DERIVED(object_literal, EXTENDS(expression), CHILDREN(MANY(expression, entries)))

DERIVED(member_access, EXTENDS(expression), CHILDREN(ONE(expression, base) STRING(member)))
DERIVED(computed_member_access, EXTENDS(expression), CHILDREN(ONE(expression, base) ONE(expression, member)))
NODE(argument_list, CHILDREN(MANY(expression, values)))
DERIVED(call_expr, EXTENDS(expression), CHILDREN(ONE(expression, callee) ONE(argument_list, args)))
DERIVED(spread_expr, EXTENDS(expression), CHILDREN(ONE(expression, list)))
DERIVED(new_expr, EXTENDS(expression), CHILDREN(ONE(expression, constructor) MAYBE(argument_list, args)))
DERIVED(new_target, EXTENDS(expression), CHILDREN())

DERIVED(unary_expr, EXTENDS(expression), CHILDREN(ONE(expression, value)))
DERIVED(postfix_increment, EXTENDS(unary_expr), CHILDREN())
DERIVED(postfix_decrement, EXTENDS(unary_expr), CHILDREN())
DERIVED(prefix_increment, EXTENDS(unary_expr), CHILDREN())
DERIVED(prefix_decrement, EXTENDS(unary_expr), CHILDREN())
DERIVED(prefix_plus, EXTENDS(unary_expr), CHILDREN())
DERIVED(prefix_minus, EXTENDS(unary_expr), CHILDREN())
DERIVED(not_expr, EXTENDS(unary_expr), CHILDREN())
DERIVED(binverse_expr, EXTENDS(unary_expr), CHILDREN())
DERIVED(typeof_expr, EXTENDS(unary_expr), CHILDREN())
DERIVED(void_expr, EXTENDS(unary_expr), CHILDREN())
DERIVED(delete_expr, EXTENDS(unary_expr), CHILDREN())

DERIVED(bin_op_expr, EXTENDS(expression), CHILDREN(ONE(expression, lhs) ONE(expression, rhs)))
// arithmetic binops
DERIVED(add, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(subtract, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(multiply, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(divide, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(pow_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(modulo_expr, EXTENDS(bin_op_expr), CHILDREN())
// comparison binops
DERIVED(less_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(less_eq_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(greater_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(greater_eq_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(equals_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(strong_equals_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(not_equals_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(strong_not_equals_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(log_and_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(log_or_expr, EXTENDS(bin_op_expr), CHILDREN())
// bitwise binops
DERIVED(lshift_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(rshift_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(log_rshift_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(bitwise_and_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(bitwise_or_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(bitwise_xor_expr, EXTENDS(bin_op_expr), CHILDREN())
// assignment binops
DERIVED(assign, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(add_assign, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(subtract_assign, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(multiply_assign, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(divide_assign, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(modulo_assign, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(pow_assign, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(lshift_assign, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(rshift_assign, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(log_rshift_assign, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(and_assign, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(or_assign, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(xor_assign, EXTENDS(bin_op_expr), CHILDREN())
// destructuring assignments
NODE(array_destruct_key, CHILDREN(STRING(key) MAYBE(expression, init)))
NODE(array_destruct_keys, CHILDREN(MANY(array_destruct_key, keys) MAYBE_STR(rest)))
DERIVED(array_destruct, EXTENDS(expression), CHILDREN(ONE(array_destruct_keys, lhs) ONE(expression, rhs)))
NODE(object_destruct_key, CHILDREN(STRING(key) MAYBE_STR(renamed) MAYBE(expression, init)))
NODE(object_destruct_keys, CHILDREN(MANY(object_destruct_key, keys))) // FIXME tc39.github.io/proposal-object-rest-spread
DERIVED(object_destruct, EXTENDS(expression), CHILDREN(ONE(object_destruct_keys, lhs) ONE(expression, rhs)))

// other binops
DERIVED(comma_operator, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(ternary_operator, EXTENDS(bin_op_expr), CHILDREN(ONE(expression, mid)))
// keyword binops
DERIVED(in_expr, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(instanceof_expr, EXTENDS(bin_op_expr), CHILDREN())

DERIVED(function_stmt, EXTENDS(statement), CHILDREN(STRING(name) ONE(param_list, params) ONE(block, body)))
DERIVED(class_stmt, EXTENDS(statement), CHILDREN(STRING(name) MAYBE(class_func, constructor) MANY(class_func, functions) MANY(class_func, static_functions)))
DERIVED(label_stmt, EXTENDS(statement), CHILDREN(STRING(label) ONE(statement, stmt)))
NODE(var_decl_part, CHILDREN(STRING(name) MAYBE(expression, init)))
DERIVED(empty_stmt, EXTENDS(statement), CHILDREN())
DERIVED(var_decl, EXTENDS(statement), CHILDREN(STRING(keyword) MANY(var_decl_part, parts)))
DERIVED(decl_array_destruct, EXTENDS(statement), CHILDREN(STRING(keyword) ONE(array_destruct, destruct)))
DERIVED(decl_object_destruct, EXTENDS(statement), CHILDREN(STRING(keyword) ONE(object_destruct, destruct)))
DERIVED(if_stmt, EXTENDS(statement), CHILDREN(ONE(expression, condition) ONE(statement, body) MAYBE(statement, else_stmt)))
DERIVED(do_while, EXTENDS(statement), CHILDREN(ONE(expression, condition) ONE(statement, body)))
DERIVED(while_stmt, EXTENDS(statement), CHILDREN(ONE(expression, condition) ONE(statement, body)))
DERIVED(for_stmt, EXTENDS(statement), CHILDREN(ONE(statement, pre_stmt) ONE(expression, condition) ONE(statement, latch_stmt) ONE(statement, body)))
DERIVED(for_in, EXTENDS(statement), CHILDREN(MAYBE_STR(keyword) STRING(var) ONE(expression, iterable) ONE(statement, body)))
DERIVED(for_of, EXTENDS(statement), CHILDREN(MAYBE_STR(keyword) STRING(var) ONE(expression, iterable) ONE(statement, body)))
NODE(switch_clause, CHILDREN(MANY(statement, stmts)))
DERIVED(case, EXTENDS(switch_clause), CHILDREN(ONE(expression, condition)))
DERIVED(switch_stmt, EXTENDS(statement), CHILDREN(ONE(expression, value) MANY(switch_clause, clauses)))
DERIVED(break_stmt, EXTENDS(statement), CHILDREN(MAYBE_STR(label)))
DERIVED(continue_stmt, EXTENDS(statement), CHILDREN(MAYBE_STR(label)))
DERIVED(return_stmt, EXTENDS(statement), CHILDREN(MAYBE(expression, value)))
DERIVED(throw_stmt, EXTENDS(statement), CHILDREN(ONE(expression, value)))
NODE(catch, CHILDREN(STRING(var) ONE(block, body)))
DERIVED(try_stmt, EXTENDS(statement), CHILDREN(ONE(block, body) MAYBE(catch, catch_block) MAYBE(block, finally)))
// FIXME these are not yet correctly modeled
DERIVED(import_stmt, EXTENDS(statement), CHILDREN())
DERIVED(export_stmt, EXTENDS(statement), CHILDREN())
DERIVED(import_wildcard, EXTENDS(statement), CHILDREN())
DERIVED(export_wildcard, EXTENDS(statement), CHILDREN(STRING(module)))

#undef MAYBE
#undef MAYBE_STR
#undef STRINGS
#undef STRING
#undef MANY
#undef ONE
#undef EXTENDS
#undef CHILDREN
#undef DERIVED
#undef NODE
