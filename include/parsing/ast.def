#ifndef NODE
#define NODE(NAME, CHILD_NODES)
#endif
#ifndef DERIVED
#define DERIVED(NAME, ANCESTORS, CHILD_NODES)
#endif
#ifndef EXTENDS
#define EXTENDS(BASE)
#endif
#ifndef CHILDREN
#define CHILDREN(...)
#endif
#ifndef ONE
#define ONE(OF, NAME)
#endif
#ifndef MANY
#define MANY(OF, NAME)
#endif
#ifndef MAYBE
#define MAYBE(OF, NAME)
#endif
#ifndef STRING
#define STRING(NAME)
#endif
#ifndef STRINGS
#define STRINGS(NAME)
#endif
#ifndef MAYBE_STR
#define MAYBE_STR(NAME)
#endif

NODE(statement, CHILDREN())
NODE(module, CHILDREN(MANY(statement, stmts)))
DERIVED(expression, EXTENDS(statement), CHILDREN())
NODE(param_list, CHILDREN(STRINGS(names) MAYBE_STR(rest)))
DERIVED(block, EXTENDS(statement), CHILDREN(MANY(statement, stmts)))
DERIVED(function, EXTENDS(expression), CHILDREN(STRING(name) ONE(param_list, params) ONE(block, body)))
DERIVED(var_decl, EXTENDS(expression), CHILDREN(STRING(keyword) STRING(name) MAYBE(expression, init)))
DERIVED(empty_stmt, EXTENDS(statement), CHILDREN())
DERIVED(identifier_expr, EXTENDS(expression), CHILDREN(STRING(str)))
DERIVED(number_literal, EXTENDS(expression), CHILDREN(STRING(val)))
DERIVED(int_literal, EXTENDS(number_literal), CHILDREN())
DERIVED(float_literal, EXTENDS(number_literal), CHILDREN())
DERIVED(hex_literal, EXTENDS(number_literal), CHILDREN())
DERIVED(oct_literal, EXTENDS(number_literal), CHILDREN())
DERIVED(bin_literal, EXTENDS(number_literal), CHILDREN())
DERIVED(string_literal, EXTENDS(expression), CHILDREN(STRING(val)))
DERIVED(array_literal, EXTENDS(expression), CHILDREN(MANY(expression, values)))
NODE(object_entry, CHILDREN(STRING(key) ONE(expression, val)))
DERIVED(object_literal, EXTENDS(expression), CHILDREN(MANY(object_entry, entries)))
DERIVED(member_access, EXTENDS(expression), CHILDREN(ONE(expression, base) ONE(identifier_expr, member)))
DERIVED(computed_member_access, EXTENDS(expression), CHILDREN(ONE(expression, base) ONE(expression, member)))
NODE(argument_list, CHILDREN(MANY(expression, values)))
DERIVED(call_expr, EXTENDS(expression), CHILDREN(ONE(expression, callee) ONE(argument_list, args)))
DERIVED(bin_op_expr, EXTENDS(expression), CHILDREN(ONE(expression, lhs) ONE(expression, rhs)))
DERIVED(add, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(subtract, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(multiply, EXTENDS(bin_op_expr), CHILDREN())
DERIVED(divide, EXTENDS(bin_op_expr), CHILDREN())


#undef MAYBE
#undef MAYBE_STR
#undef STRINGS
#undef STRING
#undef MANY
#undef ONE
#undef EXTENDS
#undef CHILDREN
#undef DERIVED
#undef NODE
