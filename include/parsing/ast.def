#ifndef NODE
#define NODE(NAME, CHILD_NODES)
#endif
#ifndef DERIVED
#define DERIVED(NAME, ANCESTORS, CHILD_NODES)
#endif
#ifndef EXTENDS
#define EXTENDS(BASE)
#endif
#ifndef CHILDREN
#define CHILDREN(...)
#endif
#ifndef ONE
#define ONE(OF, NAME)
#endif
#ifndef MANY
#define MANY(OF, NAME)
#endif
#ifndef MAYBE
#define MAYBE(OF, NAME)
#endif
#ifndef STRING
#define STRING(NAME)
#endif
#ifndef STRINGS
#define STRINGS(NAME)
#endif
#ifndef MAYBE_STR
#define MAYBE_STR(NAME)
#endif

NODE(expression, CHILDREN())
NODE(param_list, CHILDREN(STRINGS(names) MAYBE_STR(rest)))
NODE(block, CHILDREN(MANY(expression, exprs)))
DERIVED(function, EXTENDS(expression), CHILDREN(STRING(name) ONE(param_list, params) ONE(block, body)))
DERIVED(var_decl, EXTENDS(expression), CHILDREN(STRING(keyword) STRING(name) MAYBE(expression, init)))
DERIVED(empty_expr, EXTENDS(expression), CHILDREN())
DERIVED(identifier_expr, EXTENDS(expression), CHILDREN(STRING(str)))
DERIVED(bin_op_expr, EXTENDS(expression), CHILDREN(ONE(expression, lhs) ONE(expression, rhs)))
DERIVED(number_literal, EXTENDS(expression), CHILDREN(STRING(val)))
DERIVED(int_literal, EXTENDS(number_literal), CHILDREN())
DERIVED(float_literal, EXTENDS(number_literal), CHILDREN())
DERIVED(hex_literal, EXTENDS(number_literal), CHILDREN())
DERIVED(oct_literal, EXTENDS(number_literal), CHILDREN())
DERIVED(bin_literal, EXTENDS(number_literal), CHILDREN())
DERIVED(string_literal, EXTENDS(number_literal), CHILDREN(STRING(val)))
NODE(module, CHILDREN(MANY(expression, exprs)))

#undef MAYBE
#undef MAYBE_STR
#undef STRINGS
#undef STRING
#undef MANY
#undef ONE
#undef EXTENDS
#undef CHILDREN
#undef DERIVED
#undef NODE
