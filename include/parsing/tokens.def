#ifndef TOKEN_TYPE
#define TOKEN_TYPE(NAME, STR)
#endif

/*
  Punctuators defined in ECMA-262 spec:
  { ( ) [ ]
  . ... ; ,
  < > <= >=
  == != === !==
  + ‐ * % **
  ++ ‐‐
  << >> >>>
  & | ^
  ! ~
  && || ? :
  = += ‐= *= %= **= <<= >>= >>>= &= |= ^=
  =>
  /
  /=
  }
*/

/// Other
TOKEN_TYPE(DOT, ".")
TOKEN_TYPE(DOTDOTDOT, "...")
TOKEN_TYPE(COMMA, ",")
TOKEN_TYPE(SEMICOLON, ";")
TOKEN_TYPE(ARROW, "=>")
/// Math Ops
TOKEN_TYPE(MINUS, "-")
TOKEN_TYPE(PLUS, "+")
TOKEN_TYPE(ASTERISK, "*")
TOKEN_TYPE(POW, "**")
TOKEN_TYPE(SLASH, "/")
TOKEN_TYPE(PERCENT, "%")
TOKEN_TYPE(INCR, "++")
TOKEN_TYPE(DECR, "--")
/// Comparisons
TOKEN_TYPE(EQEQ, "==")
TOKEN_TYPE(EQEQEQ, "===")
TOKEN_TYPE(NEQ, "!=")
TOKEN_TYPE(NEQEQ, "!==")
TOKEN_TYPE(GT, ">")
TOKEN_TYPE(LT, "<")
TOKEN_TYPE(GTE, ">=")
TOKEN_TYPE(LTE, "<=")
/// Bitwise
TOKEN_TYPE(LSHIFT, "<<")
TOKEN_TYPE(RSHIFT, ">>")
TOKEN_TYPE(LOG_RSHIFT, ">>>")
TOKEN_TYPE(AMPERSAND, "&")
TOKEN_TYPE(VERT_PIPE, "|")
TOKEN_TYPE(CARET, "^")
TOKEN_TYPE(TILDE, "~")
/// Boolean
TOKEN_TYPE(EXMARK, "!")
TOKEN_TYPE(QMARK, "?")
TOKEN_TYPE(COLON, ":")
TOKEN_TYPE(LOG_AND, "&&")
TOKEN_TYPE(LOG_OR, "||")
/// Assignments
TOKEN_TYPE(EQ, "=")
TOKEN_TYPE(PLUS_EQ, "+=")
TOKEN_TYPE(MINUS_EQ, "-=")
TOKEN_TYPE(MOD_EQ, "%=")
TOKEN_TYPE(MUL_EQ, "*=")
TOKEN_TYPE(DIV_EQ, "/=")
TOKEN_TYPE(POW_EQ, "**=")
TOKEN_TYPE(LSH_EQ, "<<=")
TOKEN_TYPE(RSH_EQ, ">>=")
TOKEN_TYPE(LOG_RSH_EQ, ">>>=")
TOKEN_TYPE(AND_EQ, "&=")
TOKEN_TYPE(OR_EQ, "|=")
TOKEN_TYPE(CARET_EQ, "^=")
/// Braces
TOKEN_TYPE(PAREN_OPEN, "(")
TOKEN_TYPE(PAREN_CLOSE, ")")
TOKEN_TYPE(BRACE_OPEN, "{")
TOKEN_TYPE(BRACE_CLOSE, "}")
TOKEN_TYPE(BRACKET_OPEN, "[")
TOKEN_TYPE(BRACKET_CLOSE, "]")
/// Names & Literals
TOKEN_TYPE(KEYWORD, "")
TOKEN_TYPE(IDENTIFIER, "")
TOKEN_TYPE(INT_LITERAL, "")
TOKEN_TYPE(HEX_LITERAL, "")
TOKEN_TYPE(OCT_LITERAL, "")
TOKEN_TYPE(BIN_LITERAL, "")
TOKEN_TYPE(FLOAT_LITERAL, "")
TOKEN_TYPE(STRING_LITERAL, "")
TOKEN_TYPE(TEMPLATE_LITERAL, "")
/// Comments
TOKEN_TYPE(LINE_COMMENT, "")
TOKEN_TYPE(BLOCK_COMMENT, "")

#undef TOKEN_TYPE